#include <iostream>
using namespace std;

// Функция для вывода количества вызовов с использованием статической локальной переменной
void count_calls_static() {
    static int call_count = 0;  // Статическая локальная переменная
    call_count++;  // Увеличиваем счетчик
    cout << "Function has been called " << call_count << " times (using static local variable)." << endl;
}

int main() {
    // Вызываем функцию 10 раз
    for (int i = 0; i < 10; i++) {
        count_calls_static();
    }
    return 0;
}


//// Глобальная переменная для подсчета количества вызовов
//int call_count = 0;
//
//// Функция для вывода количества вызовов
//void count_calls_global() {
//    call_count++;  // Увеличиваем счетчик
//    cout << "Function has been called " << call_count << " times (using global variable)." << endl;
//}
//
//int main() {
//    // Вызываем функцию 10 раз
//    for (int i = 0; i < 10; i++) {
//        count_calls_global();
//    }
//    return 0;
//}


//________________________________ОТВЕТЫ________________________________

// 1. Предпочтительнее использовать **статическую локальную переменную**, так как она сохраняет значение между вызовами, но ограничена областью функции.
//    Глобальная переменная доступна во всей программе, что может привести к непреднамеренным изменениям из других функций.

// 2. Обычная локальная переменная не подходит, так как она сбрасывается при каждом вызове функции и не может сохранять состояние между вызовами.

